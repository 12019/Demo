import android.os.ICustGpioService;

private ICustGpioService gpioservice = null;

gpioservice = ICustGpioService.Stub.asInterface(ServiceManager.getService("custgpio"));
try {
	tempState = gpioservice.getGpio(91);
    }catch (Exception e){
	tempState = 0;
    }
	return (tempState == 1) ? false : true;	
}

//Android.mk 实现编译
frameworks/base/Android.mk
LOCAL_SRC_FILES += core/java/android/os/ICustGpioService.aidl 

//aidl语言会实现好binder接口，会在out下面生成ICustGpioService.java（看不懂）
frameworks/base/core/java/android/os/ICustGpioService.aidl    		
package android.os;

interface ICustGpioService {  
    void setGpio(int gpio_num,int val);  
	int getGpio(int gpio_num); 
	int getAdcValue();
}  

该目录下的所有java文件都会编译
//frameworks/base/services/java/Android.mk
LOCAL_SRC_FILES += $(call all-subdir-java-files)

//在对应的service代码中调用本地方法。
frameworks/base/services/java/com/android/server/CustGpioService.java
    private native int cust_gpio_init_Native();  
    private native void cust_gpio_set_gpio_Native(int gpio_num,int val);  
    private native int cust_gpio_get_gpio_Native(int gpio_num);  
    private native int cust_gpio_get_adc_Native(); 

需要make update-api
frameworks/base/api/current.txt

编译jni
/frameworks/base/services/jni/Android.mk
LOCAL_SRC_FILES += com_android_server_CustGpioService.cpp
//jni实现代码,使用安卓自带的接口实现注册(即在onload.cpp中实现注册)
frameworks/base/services/jni/com_android_server_CustGpioService.cpp
	static const JNINativeMethod method_table[] = {  
                {"cust_gpio_init_Native", "()I", (void*)cust_gpio_init},  
	        {"cust_gpio_set_gpio_Native", "(II)V", (void*)cust_gpio_set_gpio},  
	        {"cust_gpio_get_gpio_Native", "(I)I", (void*)cust_gpio_get_gpio},  
	        {"cust_gpio_get_adc_Native", "()I", (void*)cust_gpio_get_adc}, 
          };
	
	  int register_android_server_CustGpioService(JNIEnv *env) {  
            return jniRegisterNativeMethods(env, "com/android/server/CustGpioService", method_table, NELEM(method_table));  
          }  	

//onload.cpp相当于一个系统的jni
frameworks/base/services/jni/onload.cpp
extern "C" jint JNI_OnLoad(JavaVM* vm, void* reserved)
{
    JNIEnv* env = NULL;
    jint result = -1;

    if (vm->GetEnv((void**) &env, JNI_VERSION_1_4) != JNI_OK) {
        ALOGE("GetEnv failed!");
        return result;
    }
    ALOG_ASSERT(env, "Could not retrieve the env!");
    register_android_server_CustGpioService(env);          
    ...
}            	
          
//到这里就分析完了，剩下的就是linux应用层和kernel层的事情了。		
